# トークンタイプを抜き出してソースコードを生成する
# IN : token/token.go 
# OUT: paser/lex.txt
PATH=母艦パスを「../token」で相対パス展開。
PATH_IN=「{PATH}/token.go」
PATH_OUT=「{母艦パス}/extract_token.txt」
PATH_PARSER_Y=「{母艦パス}/parser.go.y」
PATH_PARSER_GEN_Y=「{母艦パス}/_parser_generated.y」
PATH_PARSER_TOKENNO_GO=「{母艦パス}/parser_token_no.go」

FLG=０
RES=[]
SSS=PATH_INを開く
SSSを改行で区切って、反復
　　対象をトリムしてLに代入
　　もし、L=「//__BEGIN_TOKEN__」ならば、FLG=１
　　もし、L=「//__END_TOKEN__」ならば、FLG=0
　　C2=LEFT(L,2)
　　もし、C2=「//」ならば、続ける。
　　もし、FLG=１ならば
　　　　Lで出力実行
　　ここまで。
ここまで。

# TOKENS!!
TOKENS=RESを「 」で配列結合。
TOKENS=『%token<token> 』&TOKENS

CASE=""
RESを反復
  CASE=CASE&「  case token.{対象}: return {対象}」&改行
ここまで

# FUNC!!
FUNC=『func getTokenNo(token_type token.TType) int {
  switch token_type {
』&CASE&『
  }
  panic("[SYSTEM ERROR] parser/extract_token.nako3")
  return -1
}
』

# parser.y に埋め込む
PATH_PARSER_Yを開く
「__TOKENS_LIST__」をTOKENSに置換。
### 「__FUNC_GET_TOKEN_NO_CONTNTS__」をCASEに置換。
「__TOP_COMMENT__」を「Code generated by extract_token.nako3 and parser.y DO NOT EDIT.」に置換。
PATH_PARSER_GEN_Yに保存。

# parser_tokeno.go を自動生成する
TEMPLATE=『
// Code generated by extract_token.nako3 and token/token.go DO NOT EDIT.
package parser
import (
	"github.com/kujirahand/nadesiko3go/token"
)

// このファイルは、extract_token.nako3 により自動生成
func getTokenNo(token_type token.TType) int {
	switch token_type {
__FUNC_GET_TOKEN_NO_CONTNTS__
	}
	panic("[SYSTEM ERROR] parser.y + extract_token.nako3")
	// return -1
}
』
TEMPLATEの 「__FUNC_GET_TOKEN_NO_CONTNTS__」をCASEに置換。
PATH_PARSER_TOKENNO_GOに保存。

●(Lで)出力実行とは
　　Lの「=」まで切り取る。
　　トリム
　　もし、それが空ならば、戻る。
　　RESにそれを配列追加。
ここまで


