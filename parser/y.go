// Code generated by goyacc -o parser/y.go parser/_parser_generated.y. DO NOT EDIT.

//line parser/_parser_generated.y:3
// ==================================================================
// ■ なでしこ3 --- 文法定義 (goyaccを利用)
// ==================================================================
// (メモ) Lexerはgoyaccが要求する形にするため
// github.com/kujirahand/nadesiko3go/lexerをラップしてこのユニットで使用
//
package parser

import __yyfmt__ "fmt"

//line parser/_parser_generated.y:9
import (
	"github.com/kujirahand/nadesiko3go/core"
	"github.com/kujirahand/nadesiko3go/lexer"
	"github.com/kujirahand/nadesiko3go/node"
	"github.com/kujirahand/nadesiko3go/token"
	"github.com/kujirahand/nadesiko3go/value"
)

//line parser/_parser_generated.y:19
type yySymType struct {
	yys      int
	token    *token.Token // lval *yySymType
	node     node.Node
	jsonkv   node.JSONHashKeyValue
	nodelist node.TNodeList
}

const UNKNOWN = 57346
const COMMENT = 57347
const FUNC = 57348
const FUNC_JOSI = 57349
const EOF = 57350
const LF = 57351
const EOS = 57352
const EOS4ELSE = 57353
const COMMA = 57354
const NUMBER = 57355
const STRING = 57356
const STRING_EX = 57357
const WORD = 57358
const WORD_REF = 57359
const AND = 57360
const OR = 57361
const IF = 57362
const THEN = 57363
const THEN_SINGLE = 57364
const ELSE = 57365
const ELSE_SINGLE = 57366
const BEGIN = 57367
const END = 57368
const AIDA = 57369
const WHILE_BEGIN = 57370
const FOREACH_BEGIN = 57371
const FOREACH = 57372
const FOREACH_SINGLE = 57373
const FOR_BEGIN = 57374
const FOR = 57375
const FOR_SINGLE = 57376
const KAI_BEGIN = 57377
const KAI = 57378
const KAI_SINGLE = 57379
const SAKINI = 57380
const TUGINI = 57381
const BREAK = 57382
const CONTINUE = 57383
const RETURN = 57384
const TIKUJI = 57385
const LET = 57386
const HENSU = 57387
const TEISU = 57388
const INCLUDE = 57389
const LET_BEGIN = 57390
const BEGIN_CALLFUNC = 57391
const ERROR_TRY = 57392
const ERROR = 57393
const DEF_FUNC = 57394
const EQ = 57395
const PLUS = 57396
const STR_PLUS = 57397
const MINUS = 57398
const NOT = 57399
const MUL = 57400
const DIV = 57401
const MOD = 57402
const EXP = 57403
const EQEQ = 57404
const NTEQ = 57405
const GT = 57406
const GTEQ = 57407
const LT = 57408
const LTEQ = 57409
const LPAREN = 57410
const RPAREN = 57411
const LBRACKET = 57412
const RBRACKET = 57413
const LBRACE = 57414
const RBRACE = 57415
const COLON = 57416

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"UNKNOWN",
	"COMMENT",
	"FUNC",
	"FUNC_JOSI",
	"EOF",
	"LF",
	"EOS",
	"EOS4ELSE",
	"COMMA",
	"NUMBER",
	"STRING",
	"STRING_EX",
	"WORD",
	"WORD_REF",
	"AND",
	"OR",
	"IF",
	"THEN",
	"THEN_SINGLE",
	"ELSE",
	"ELSE_SINGLE",
	"BEGIN",
	"END",
	"AIDA",
	"WHILE_BEGIN",
	"FOREACH_BEGIN",
	"FOREACH",
	"FOREACH_SINGLE",
	"FOR_BEGIN",
	"FOR",
	"FOR_SINGLE",
	"KAI_BEGIN",
	"KAI",
	"KAI_SINGLE",
	"SAKINI",
	"TUGINI",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"TIKUJI",
	"LET",
	"HENSU",
	"TEISU",
	"INCLUDE",
	"LET_BEGIN",
	"BEGIN_CALLFUNC",
	"ERROR_TRY",
	"ERROR",
	"DEF_FUNC",
	"EQ",
	"PLUS",
	"STR_PLUS",
	"MINUS",
	"NOT",
	"MUL",
	"DIV",
	"MOD",
	"EXP",
	"EQEQ",
	"NTEQ",
	"GT",
	"GTEQ",
	"LT",
	"LTEQ",
	"LPAREN",
	"RPAREN",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"COLON",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser/_parser_generated.y:274

var haltError error = nil

type Lexer struct {
	sys       *core.Core
	lexer     *lexer.Lexer
	tokens    token.Tokens
	index     int
	loopId    int
	lastToken *token.Token
	result    node.Node
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 804

var yyAct = [...]int{

	5, 155, 138, 86, 94, 95, 96, 97, 170, 144,
	169, 119, 74, 136, 169, 118, 3, 114, 67, 43,
	62, 66, 88, 89, 69, 71, 76, 78, 79, 80,
	82, 85, 119, 59, 121, 4, 23, 72, 73, 44,
	120, 45, 92, 153, 207, 70, 206, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 74, 187, 142, 46, 47, 168, 66, 205,
	201, 117, 137, 199, 200, 122, 123, 176, 175, 44,
	177, 129, 130, 197, 87, 193, 21, 186, 185, 184,
	115, 141, 36, 37, 38, 64, 126, 125, 143, 139,
	133, 54, 60, 55, 116, 56, 57, 58, 59, 48,
	49, 50, 51, 52, 53, 17, 16, 69, 173, 147,
	148, 149, 150, 56, 57, 58, 59, 198, 20, 195,
	174, 161, 17, 16, 6, 179, 164, 165, 166, 163,
	167, 158, 154, 134, 157, 171, 90, 19, 162, 41,
	140, 42, 93, 146, 63, 65, 39, 54, 60, 55,
	178, 56, 57, 58, 59, 183, 95, 96, 97, 44,
	40, 189, 188, 43, 88, 89, 15, 180, 192, 156,
	2, 194, 11, 172, 14, 12, 10, 13, 9, 77,
	44, 190, 191, 44, 8, 7, 21, 202, 44, 196,
	203, 204, 36, 37, 38, 64, 18, 46, 47, 1,
	0, 0, 0, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 44, 44, 0, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 20, 0,
	0, 0, 0, 54, 60, 55, 0, 56, 57, 58,
	59, 48, 49, 50, 51, 52, 53, 19, 0, 41,
	0, 42, 34, 22, 21, 0, 17, 16, 0, 0,
	36, 37, 38, 24, 0, 0, 0, 26, 0, 0,
	0, 0, 0, 0, 0, 30, 29, 0, 0, 28,
	0, 0, 27, 0, 46, 47, 0, 32, 31, 33,
	0, 0, 0, 0, 0, 25, 20, 0, 0, 35,
	0, 0, 46, 47, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 19, 0, 41, 0, 42,
	54, 60, 55, 0, 56, 57, 58, 59, 48, 49,
	50, 51, 52, 53, 0, 0, 0, 151, 54, 60,
	55, 0, 56, 57, 58, 59, 48, 49, 50, 51,
	52, 53, 0, 113, 17, 16, 0, 0, 0, 0,
	0, 0, 0, 46, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 47, 0,
	0, 0, 0, 0, 0, 17, 16, 61, 0, 0,
	0, 0, 181, 182, 46, 47, 0, 0, 0, 54,
	60, 55, 0, 56, 57, 58, 59, 48, 49, 50,
	51, 52, 53, 54, 60, 55, 0, 56, 57, 58,
	59, 48, 49, 50, 51, 52, 53, 0, 0, 0,
	54, 60, 55, 0, 56, 57, 58, 59, 48, 49,
	50, 51, 52, 53, 46, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 159,
	160, 46, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 131, 0, 46, 47, 0, 0,
	54, 60, 55, 0, 56, 57, 58, 59, 48, 49,
	50, 51, 52, 53, 128, 127, 0, 54, 60, 55,
	0, 56, 57, 58, 59, 48, 49, 50, 51, 52,
	53, 0, 54, 60, 55, 0, 56, 57, 58, 59,
	48, 49, 50, 51, 52, 53, 46, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	46, 47, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 152, 124, 46, 47, 0, 0, 0, 0,
	0, 0, 54, 60, 55, 0, 56, 57, 58, 59,
	48, 49, 50, 51, 52, 53, 54, 60, 55, 0,
	56, 57, 58, 59, 48, 49, 50, 51, 52, 53,
	54, 60, 55, 0, 56, 57, 58, 59, 48, 49,
	50, 51, 52, 53, 21, 0, 0, 46, 47, 0,
	36, 37, 38, 64, 0, 21, 0, 0, 0, 0,
	0, 36, 37, 38, 64, 0, 21, 84, 83, 0,
	0, 21, 36, 37, 38, 64, 0, 36, 37, 38,
	64, 81, 0, 54, 60, 55, 20, 56, 57, 58,
	59, 48, 49, 50, 51, 52, 53, 20, 0, 0,
	0, 0, 0, 0, 0, 19, 0, 41, 20, 42,
	0, 0, 0, 20, 0, 21, 19, 145, 41, 0,
	42, 36, 37, 38, 64, 75, 0, 19, 0, 41,
	91, 42, 19, 0, 41, 0, 42, 0, 68, 21,
	0, 0, 0, 22, 21, 36, 37, 38, 64, 0,
	36, 37, 38, 64, 21, 0, 0, 20, 0, 0,
	36, 37, 38, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 19, 0, 41, 0,
	42, 20, 0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 20, 0, 0, 0,
	19, 0, 41, 0, 42, 19, 0, 41, 0, 42,
	0, 0, 0, 0, 0, 19, 0, 41, 0, 42,
	54, 60, 55, 0, 56, 57, 58, 59, 48, 49,
	50, 51, 52, 53,
}
var yyPact = [...]int{

	257, -1000, 257, 123, -1000, 355, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 707,
	707, -1000, -50, 702, -8, 678, 717, 717, 634, 607,
	717, -1000, -1000, -1000, -1000, 16, -1000, -1000, -1000, -1000,
	-1000, 629, 152, 123, -1000, -1000, 717, 717, 717, 717,
	717, 717, 717, 717, 717, 717, 717, 717, 717, 717,
	717, -1000, 294, -52, -58, -1000, 599, 717, -1000, 599,
	717, -38, -13, -19, 717, 717, 546, 75, 599, 468,
	189, 717, 453, 257, 134, 532, 4, 83, -1000, -1000,
	79, -1000, 599, -9, -65, -1000, -1000, -1000, 736, 736,
	103, 103, 103, 103, 103, 103, 65, 65, -28, -28,
	-28, -1000, 65, -1000, -1000, -59, 618, 386, 717, 717,
	717, 717, 276, 518, -1, 257, 257, 257, 132, 436,
	189, 257, 130, 123, 257, 257, 257, 83, -2, -1000,
	-1000, 599, -1000, -66, 717, -1000, -1000, 386, 47, 599,
	599, -1000, -1000, -1000, 106, 54, 257, 123, 257, 126,
	257, 369, 123, 257, 63, 62, 61, -6, 168, -1000,
	717, 599, -1000, -1000, 257, 257, 257, -1000, 59, 257,
	123, 120, 257, 57, -1000, -1000, -1000, 118, 64, 599,
	123, 123, 48, -1000, 44, 257, 123, -1000, 257, 257,
	-1000, -1000, 43, 20, 18, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 209, 16, 35, 134, 0, 206, 195, 194, 189,
	188, 187, 186, 185, 184, 182, 176, 170, 156, 152,
	4, 3, 179, 146, 25, 36, 1, 2,
}
var yyR1 = [...]int{

	0, 1, 22, 22, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 14, 3, 3,
	7, 7, 7, 7, 7, 7, 7, 7, 24, 24,
	4, 4, 4, 25, 25, 6, 6, 6, 6, 6,
	18, 18, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 17, 17, 17, 23, 23, 20, 20, 20,
	19, 19, 8, 8, 8, 8, 8, 9, 26, 11,
	11, 11, 11, 10, 10, 13, 15, 15, 15, 15,
	12, 12, 12, 12, 21, 21, 16, 16, 16, 27,
	27,
}
var yyR2 = [...]int{

	0, 1, 1, 2, 1, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 5, 4, 4, 4, 2, 4, 2, 3, 4,
	1, 2, 4, 1, 2, 1, 1, 1, 1, 1,
	1, 2, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 1, 3, 2, 3, 1, 2, 1, 1, 1,
	3, 4, 6, 4, 6, 7, 5, 1, 1, 1,
	1, 1, 2, 4, 6, 5, 4, 3, 6, 5,
	7, 8, 5, 6, 1, 1, 5, 8, 8, 1,
	2,
}
var yyChk = [...]int{

	-1000, -1, -22, -2, -3, -5, -4, -7, -8, -10,
	-12, -15, -13, -11, -14, -16, 10, 9, -6, 68,
	49, 7, 6, -25, 16, 48, 20, 35, 32, 29,
	28, 41, 40, 42, 5, 52, 13, 14, 15, -18,
	-17, 70, 72, -2, -3, -3, 18, 19, 62, 63,
	64, 65, 66, 67, 54, 56, 58, 59, 60, 61,
	55, 42, -5, -4, 16, -4, -5, 68, 6, -5,
	53, -24, 45, 46, 70, 17, -5, -9, -5, -5,
	-5, 17, -5, 31, 30, -5, -21, 68, 6, 7,
	-23, 71, -5, -19, -20, 14, 15, 16, -5, -5,
	-5, -5, -5, -5, -5, -5, -5, -5, -5, -5,
	-5, -5, -5, 69, 69, -24, -25, -5, 53, 70,
	53, 53, -5, -5, 17, 22, 21, 37, 36, -5,
	-5, 31, 30, -2, 9, 27, 9, 68, -27, 16,
	71, -5, 73, -20, 74, 69, -3, -5, -5, -5,
	-5, 71, 44, 44, -2, -26, -22, -2, 9, 33,
	34, -5, -2, 9, -26, -26, -26, -27, 69, 16,
	74, -5, -3, 71, 24, 24, 23, 26, -26, 9,
	-2, 33, 34, -26, 26, 26, 26, 69, -21, -5,
	-2, -2, -26, 26, -26, 9, -2, 26, 9, 9,
	26, 26, -26, -26, -26, 26, 26, 26,
}
var yyDef = [...]int{

	0, -2, 1, 2, 4, 33, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 18, 19, 42, 0,
	0, 61, 30, 0, 40, 0, 0, 0, 0, 0,
	0, 79, 80, 81, 17, 0, 35, 36, 37, 38,
	39, 0, 0, 3, 6, 5, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 33, 0, 40, 60, 33, 0, 31, 34,
	0, 41, 25, 27, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	0, 63, 65, 0, 0, 67, 68, 69, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 41, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 99,
	62, 66, 64, 0, 0, 32, 20, 0, 0, 24,
	26, 28, 22, 23, 73, 0, 78, 83, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 100,
	0, 70, 21, 29, 0, 0, 0, 76, 0, 0,
	92, 0, 0, 0, 89, 85, 96, 0, 0, 71,
	72, 74, 0, 84, 0, 0, 93, 88, 0, 0,
	75, 90, 0, 0, 0, 91, 98, 97,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/_parser_generated.y:50
		{
			yyVAL.node = yyDollar[1].nodelist
			yylex.(*Lexer).result = yyVAL.node
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/_parser_generated.y:53
		{
			yyVAL.nodelist = node.TNodeList{yyDollar[1].node}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/_parser_generated.y:54
		{
			yyVAL.nodelist = append(yyDollar[1].nodelist, yyDollar[2].node)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/_parser_generated.y:72
		{
			yyVAL.node = node.NewNodeNop(yyDollar[1].token)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/_parser_generated.y:75
		{
			yyVAL.node = node.NewNodeNop(yyDollar[1].token)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/_parser_generated.y:76
		{
			yyVAL.node = node.NewNodeNop(yyDollar[1].token)
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/_parser_generated.y:79
		{
			yyVAL.node = node.NewNodeLet(yyDollar[1].token, nil, yyDollar[3].node)
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/_parser_generated.y:80
		{
			yyVAL.node = node.NewNodeLet(yyDollar[1].token, yyDollar[2].nodelist, yyDollar[4].node)
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/_parser_generated.y:81
		{
			yyVAL.node = node.NewNodeLet(yyDollar[2].token, nil, yyDollar[3].node)
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/_parser_generated.y:82
		{
			yyVAL.node = node.NewNodeLet(yyDollar[3].token, nil, yyDollar[2].node)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/_parser_generated.y:83
		{
			yyVAL.node = node.NewNodeDefVar(yyDollar[1].token, yyDollar[4].node)
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/_parser_generated.y:84
		{
			yyVAL.node = node.NewNodeDefVar(yyDollar[1].token, nil)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/_parser_generated.y:85
		{
			yyVAL.node = node.NewNodeDefConst(yyDollar[1].token, yyDollar[4].node)
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/_parser_generated.y:86
		{
			yyVAL.node = node.NewNodeDefConst(yyDollar[1].token, nil)
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:89
		{
			yyVAL.nodelist = node.TNodeList{yyDollar[2].node}
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/_parser_generated.y:90
		{
			yyVAL.nodelist = append(yyDollar[1].nodelist, yyDollar[3].node)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/_parser_generated.y:93
		{
			yyVAL.node = node.NewNodeCallFunc(yyDollar[1].token, nil)
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/_parser_generated.y:94
		{
			yyVAL.node = node.NewNodeCallFunc(yyDollar[2].token, yyDollar[1].nodelist)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/_parser_generated.y:95
		{
			yyVAL.node = node.NewNodeCallFuncCStyle(yyDollar[1].token, yyDollar[3].nodelist, yyDollar[4].token)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/_parser_generated.y:98
		{
			yyVAL.nodelist = node.TNodeList{yyDollar[1].node}
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/_parser_generated.y:99
		{
			yyVAL.nodelist = append(yyDollar[1].nodelist, yyDollar[2].node)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/_parser_generated.y:103
		{
			yyVAL.node = node.NewNodeConst(value.Float, yyDollar[1].token)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/_parser_generated.y:104
		{
			yyVAL.node = node.NewNodeConst(value.Str, yyDollar[1].token)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/_parser_generated.y:105
		{
			yyVAL.node = node.NewNodeConstEx(value.Str, yyDollar[1].token)
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/_parser_generated.y:110
		{
			yyVAL.node = node.NewNodeWord(yyDollar[1].token, nil)
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/_parser_generated.y:111
		{
			yyVAL.node = node.NewNodeWord(yyDollar[1].token, yyDollar[2].nodelist)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:115
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:116
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:117
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:118
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:119
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:120
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:121
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:122
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:123
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:124
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:125
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:126
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:127
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:128
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:129
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:130
		{
			yyVAL.node = node.NewNodeCalc(yyDollar[3].token, yyDollar[2].node)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:131
		{
			yyVAL.node = node.NewNodeCalc(yyDollar[3].token, yyDollar[2].node)
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/_parser_generated.y:132
		{
			yyVAL.node = yyDollar[2].node
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/_parser_generated.y:133
		{
			yyVAL.node = node.NewNodeCallFunc(yyDollar[1].token, nil)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:137
		{
			yyVAL.node = node.NewNodeJSONArray(yyDollar[1].token, yyDollar[2].nodelist, yyDollar[3].token)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/_parser_generated.y:138
		{
			yyVAL.node = node.NewNodeJSONArray(yyDollar[1].token, nil, yyDollar[2].token)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:139
		{
			yyVAL.node = node.NewNodeJSONHash(yyDollar[1].token, yyDollar[2].jsonkv, yyDollar[3].token)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/_parser_generated.y:142
		{
			yyVAL.nodelist = node.TNodeList{yyDollar[1].node}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/_parser_generated.y:143
		{
			yyVAL.nodelist = append(yyDollar[1].nodelist, yyDollar[2].node)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:152
		{
			kv := node.JSONHashKeyValue{}
			kv[yyDollar[1].token.Literal] = yyDollar[3].node
			yyVAL.jsonkv = kv
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/_parser_generated.y:158
		{
			yyDollar[1].jsonkv[yyDollar[2].token.Literal] = yyDollar[4].node
			yyVAL.jsonkv = yyDollar[1].jsonkv
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/_parser_generated.y:167
		{
			yyVAL.node = node.NewNodeIf(yyDollar[1].token, yyDollar[2].node, yyDollar[4].node, yyDollar[6].node)
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/_parser_generated.y:171
		{
			yyVAL.node = node.NewNodeIf(yyDollar[1].token, yyDollar[2].node, yyDollar[4].node, nil)
		}
	case 74:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/_parser_generated.y:175
		{
			yyVAL.node = node.NewNodeIf(yyDollar[1].token, yyDollar[2].node, yyDollar[4].nodelist, yyDollar[6].node)
		}
	case 75:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/_parser_generated.y:179
		{
			yyVAL.node = node.NewNodeIf(yyDollar[1].token, yyDollar[2].node, yyDollar[4].nodelist, yyDollar[6].nodelist)
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/_parser_generated.y:183
		{
			yyVAL.node = node.NewNodeIf(yyDollar[1].token, yyDollar[2].node, yyDollar[4].nodelist, nil)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/_parser_generated.y:195
		{
			yyVAL.node = node.NewNodeContinue(yyDollar[1].token, 0)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/_parser_generated.y:196
		{
			yyVAL.node = node.NewNodeBreak(yyDollar[1].token, 0)
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/_parser_generated.y:197
		{
			yyVAL.node = node.NewNodeReturn(yyDollar[1].token, nil, 0)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/_parser_generated.y:198
		{
			yyVAL.node = node.NewNodeReturn(yyDollar[2].token, yyDollar[1].node, 0)
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/_parser_generated.y:202
		{
			yyVAL.node = node.NewNodeRepeat(yyDollar[3].token, yyDollar[2].node, yyDollar[4].node)
		}
	case 84:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/_parser_generated.y:206
		{
			yyVAL.node = node.NewNodeRepeat(yyDollar[3].token, yyDollar[2].node, yyDollar[5].nodelist)
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/_parser_generated.y:212
		{
			yyVAL.node = node.NewNodeWhile(yyDollar[3].token, yyDollar[2].node, yyDollar[4].nodelist)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/_parser_generated.y:218
		{
			yyVAL.node = node.NewNodeForeach(yyDollar[3].token, yyDollar[2].node, yyDollar[4].node)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/_parser_generated.y:222
		{
			yyVAL.node = node.NewNodeForeach(yyDollar[2].token, nil, yyDollar[3].node)
		}
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/_parser_generated.y:226
		{
			yyVAL.node = node.NewNodeForeach(yyDollar[3].token, yyDollar[2].node, yyDollar[5].nodelist)
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/_parser_generated.y:230
		{
			yyVAL.node = node.NewNodeForeach(yyDollar[2].token, nil, yyDollar[4].nodelist)
		}
	case 90:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/_parser_generated.y:236
		{
			yyVAL.node = node.NewNodeFor(yyDollar[4].token, "", yyDollar[2].node, yyDollar[3].node, yyDollar[6].nodelist)
		}
	case 91:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/_parser_generated.y:240
		{
			yyVAL.node = node.NewNodeFor(yyDollar[5].token, yyDollar[2].token.Literal, yyDollar[3].node, yyDollar[4].node, yyDollar[7].nodelist)
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/_parser_generated.y:244
		{
			yyVAL.node = node.NewNodeFor(yyDollar[4].token, "", yyDollar[2].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 93:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/_parser_generated.y:248
		{
			yyVAL.node = node.NewNodeFor(yyDollar[5].token, yyDollar[2].token.Literal, yyDollar[3].node, yyDollar[4].node, yyDollar[6].node)
		}
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/_parser_generated.y:258
		{
			yyVAL.node = node.NewNodeDefFunc(yyDollar[2].token, node.NewNodeList(), yyDollar[4].nodelist)
		}
	case 97:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/_parser_generated.y:262
		{
			yyVAL.node = node.NewNodeDefFunc(yyDollar[5].token, yyDollar[3].nodelist, yyDollar[7].nodelist)
		}
	case 98:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/_parser_generated.y:266
		{
			yyVAL.node = node.NewNodeDefFunc(yyDollar[2].token, yyDollar[4].nodelist, yyDollar[7].nodelist)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/_parser_generated.y:271
		{
			yyVAL.nodelist = node.TNodeList{node.NewNodeWord(yyDollar[1].token, nil)}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/_parser_generated.y:272
		{
			yyVAL.nodelist = append(yyDollar[1].nodelist, node.NewNodeWord(yyDollar[2].token, nil))
		}
	}
	goto yystack /* stack new state and value */
}
