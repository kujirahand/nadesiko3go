// Code generated by goyacc _parser_generated.y. DO NOT EDIT.

//line _parser_generated.y:3
//
// なでしこ3 --- 文法定義 (goyaccを利用)
//
// Lexerはgoyaccが要求する形にするため
// github.com/kujirahand/nadesiko3go/lexerをラップしてこのユニットで使用
//
package parser

import __yyfmt__ "fmt"

//line _parser_generated.y:9
import (
	"fmt"
	"github.com/kujirahand/nadesiko3go/core"
	"github.com/kujirahand/nadesiko3go/lexer"
	"github.com/kujirahand/nadesiko3go/node"
	"github.com/kujirahand/nadesiko3go/token"
	"github.com/kujirahand/nadesiko3go/value"
	"strings"
)

//line _parser_generated.y:21
type yySymType struct {
	yys   int
	token *token.Token // lval *yySymType
	node  node.Node
}

const UNKNOWN = 57346
const COMMENT = 57347
const FUNC = 57348
const EOF = 57349
const LF = 57350
const EOS = 57351
const EOS4ELSE = 57352
const COMMA = 57353
const NUMBER = 57354
const STRING = 57355
const STRING_EX = 57356
const WORD = 57357
const WORD_REF = 57358
const AND = 57359
const OR = 57360
const IF = 57361
const THEN = 57362
const THEN_SINGLE = 57363
const ELSE = 57364
const ELSE_SINGLE = 57365
const BEGIN = 57366
const END = 57367
const WHILE_BEGIN = 57368
const FOR_BEGIN = 57369
const FOR = 57370
const FOR_SINGLE = 57371
const KAI_BEGIN = 57372
const KAI = 57373
const KAI_SINGLE = 57374
const AIDA = 57375
const SAKINI = 57376
const TUGINI = 57377
const FOREACH = 57378
const BREAK = 57379
const CONTINUE = 57380
const RETURN = 57381
const TIKUJI = 57382
const LET = 57383
const HENSU = 57384
const TEISU = 57385
const INCLUDE = 57386
const LET_BEGIN = 57387
const ERROR_TRY = 57388
const ERROR = 57389
const DEF_FUNC = 57390
const EQ = 57391
const PLUS = 57392
const STR_PLUS = 57393
const MINUS = 57394
const NOT = 57395
const ASTERISK = 57396
const SLASH = 57397
const PERCENT = 57398
const CIRCUMFLEX = 57399
const EQEQ = 57400
const NTEQ = 57401
const GT = 57402
const GTEQ = 57403
const LT = 57404
const LTEQ = 57405
const LPAREN = 57406
const RPAREN = 57407
const LBRACKET = 57408
const RBRACKET = 57409
const LBRACE = 57410
const RBRACE = 57411

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"UNKNOWN",
	"COMMENT",
	"FUNC",
	"EOF",
	"LF",
	"EOS",
	"EOS4ELSE",
	"COMMA",
	"NUMBER",
	"STRING",
	"STRING_EX",
	"WORD",
	"WORD_REF",
	"AND",
	"OR",
	"IF",
	"THEN",
	"THEN_SINGLE",
	"ELSE",
	"ELSE_SINGLE",
	"BEGIN",
	"END",
	"WHILE_BEGIN",
	"FOR_BEGIN",
	"FOR",
	"FOR_SINGLE",
	"KAI_BEGIN",
	"KAI",
	"KAI_SINGLE",
	"AIDA",
	"SAKINI",
	"TUGINI",
	"FOREACH",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"TIKUJI",
	"LET",
	"HENSU",
	"TEISU",
	"INCLUDE",
	"LET_BEGIN",
	"ERROR_TRY",
	"ERROR",
	"DEF_FUNC",
	"EQ",
	"PLUS",
	"STR_PLUS",
	"MINUS",
	"NOT",
	"ASTERISK",
	"SLASH",
	"PERCENT",
	"CIRCUMFLEX",
	"EQEQ",
	"NTEQ",
	"GT",
	"GTEQ",
	"LT",
	"LTEQ",
	"LPAREN",
	"RPAREN",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line _parser_generated.y:314

var haltError error = nil

type Lexer struct {
	sys       *core.Core
	lexer     *lexer.Lexer
	tokens    token.Tokens
	index     int
	loopId    int
	lastToken *token.Token
	result    node.Node
}

func NewLexerWrap(sys *core.Core, src string, fileno int) *Lexer {
	haltError = nil
	lex := Lexer{}
	lex.sys = sys
	lex.lexer = lexer.NewLexer(src, fileno)
	lex.tokens = lex.lexer.Split()
	if sys.IsDebug {
		println("[lexer.Split]")
		println(token.TokensToStringDebug(lex.tokens))
	}
	lex.index = 0
	lex.result = nil
	lex.loopId = 0
	return &lex
}

func (l *Lexer) getId() int {
	l.loopId++
	return l.loopId
}

// 字句解析の結果をgoyaccに伝える
func (l *Lexer) Lex(lval *yySymType) int {
	if l.index >= len(l.tokens) {
		return -1
	} // last
	if haltError != nil {
		return -1
	}
	// next
	t := l.tokens[l.index]
	l.index++
	lval.token = t
	// return
	result := getTokenNo(t.Type)
	if result == WORD {
		v, _ := l.sys.Scopes.Find(t.Literal)
		if v != nil && v.Type == value.Function {
			result = FUNC
			t.Type = token.FUNC
		}
	}
	l.lastToken = t
	if l.sys.IsDebug {
		fmt.Printf("- Lex (%03d) %s\n",
			t.FileInfo.Line, t.ToString())
	}
	return result
}

// エラーを報告する
func (l *Lexer) Error(e string) {
	msg := e
	msg = strings.Replace(msg, "syntax error", "文法エラー", -1)
	msg = strings.Replace(msg, "unexpected", "不正な語句:", -1)
	msg = strings.Replace(msg, "expecting", "期待する語句:", -1)
	t := l.lastToken
	lineno := t.FileInfo.Line
	desc := t.ToString()
	haltError = fmt.Errorf("(%d) %s 理由:"+msg, lineno, desc)
}

// 構文解析を実行する
func Parse(sys *core.Core, src string, fno int) (*node.Node, error) {
	l := NewLexerWrap(sys, src, fno)

	yyDebug = 1
	yyErrorVerbose = true
	yyParse(l)

	if haltError != nil {
		return nil, haltError
	}
	return &l.result, nil
}

// 以下 extract_token.nako3 により自動生成
func getTokenNo(token_type token.TType) int {
	switch token_type {
	case token.UNKNOWN:
		return UNKNOWN
	case token.COMMENT:
		return COMMENT
	case token.FUNC:
		return FUNC
	case token.EOF:
		return EOF
	case token.LF:
		return LF
	case token.EOS:
		return EOS
	case token.EOS4ELSE:
		return EOS4ELSE
	case token.COMMA:
		return COMMA
	case token.NUMBER:
		return NUMBER
	case token.STRING:
		return STRING
	case token.STRING_EX:
		return STRING_EX
	case token.WORD:
		return WORD
	case token.WORD_REF:
		return WORD_REF
	case token.AND:
		return AND
	case token.OR:
		return OR
	case token.IF:
		return IF
	case token.THEN:
		return THEN
	case token.THEN_SINGLE:
		return THEN_SINGLE
	case token.ELSE:
		return ELSE
	case token.ELSE_SINGLE:
		return ELSE_SINGLE
	case token.BEGIN:
		return BEGIN
	case token.END:
		return END
	case token.WHILE_BEGIN:
		return WHILE_BEGIN
	case token.FOR_BEGIN:
		return FOR_BEGIN
	case token.FOR:
		return FOR
	case token.FOR_SINGLE:
		return FOR_SINGLE
	case token.KAI_BEGIN:
		return KAI_BEGIN
	case token.KAI:
		return KAI
	case token.KAI_SINGLE:
		return KAI_SINGLE
	case token.AIDA:
		return AIDA
	case token.SAKINI:
		return SAKINI
	case token.TUGINI:
		return TUGINI
	case token.FOREACH:
		return FOREACH
	case token.BREAK:
		return BREAK
	case token.CONTINUE:
		return CONTINUE
	case token.RETURN:
		return RETURN
	case token.TIKUJI:
		return TIKUJI
	case token.LET:
		return LET
	case token.HENSU:
		return HENSU
	case token.TEISU:
		return TEISU
	case token.INCLUDE:
		return INCLUDE
	case token.LET_BEGIN:
		return LET_BEGIN
	case token.ERROR_TRY:
		return ERROR_TRY
	case token.ERROR:
		return ERROR
	case token.DEF_FUNC:
		return DEF_FUNC
	case token.EQ:
		return EQ
	case token.PLUS:
		return PLUS
	case token.STR_PLUS:
		return STR_PLUS
	case token.MINUS:
		return MINUS
	case token.NOT:
		return NOT
	case token.ASTERISK:
		return ASTERISK
	case token.SLASH:
		return SLASH
	case token.PERCENT:
		return PERCENT
	case token.CIRCUMFLEX:
		return CIRCUMFLEX
	case token.EQEQ:
		return EQEQ
	case token.NTEQ:
		return NTEQ
	case token.GT:
		return GT
	case token.GTEQ:
		return GTEQ
	case token.LT:
		return LT
	case token.LTEQ:
		return LTEQ
	case token.LPAREN:
		return LPAREN
	case token.RPAREN:
		return RPAREN
	case token.LBRACKET:
		return LBRACKET
	case token.RBRACKET:
		return RBRACKET
	case token.LBRACE:
		return LBRACE
	case token.RBRACE:
		return RBRACE

	}
	panic("[SYSTEM ERROR] parser.y + extract_token.nako3")
	return -1
}

// (メモ) これより下にコードを書かないようにする
// → 行番号が変わらないための対策

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 202

var yyAct = [...]int{

	117, 33, 34, 3, 6, 127, 40, 113, 82, 32,
	28, 17, 109, 16, 15, 44, 50, 37, 38, 39,
	20, 61, 75, 46, 22, 83, 54, 56, 57, 58,
	60, 25, 24, 52, 115, 23, 114, 31, 72, 73,
	74, 76, 27, 26, 37, 38, 39, 47, 59, 78,
	21, 93, 153, 29, 152, 81, 149, 84, 85, 37,
	38, 39, 47, 91, 92, 90, 89, 78, 148, 36,
	62, 70, 69, 71, 105, 106, 107, 143, 108, 102,
	103, 104, 46, 37, 38, 39, 47, 111, 112, 30,
	138, 116, 18, 119, 124, 125, 36, 123, 135, 136,
	46, 96, 97, 98, 99, 100, 101, 37, 38, 39,
	47, 36, 126, 37, 38, 39, 47, 53, 121, 122,
	128, 132, 40, 137, 130, 129, 134, 131, 86, 88,
	87, 142, 140, 141, 144, 36, 110, 77, 79, 80,
	146, 48, 49, 45, 139, 14, 150, 147, 151, 37,
	38, 39, 47, 16, 15, 95, 4, 145, 133, 36,
	120, 94, 41, 42, 43, 36, 63, 64, 65, 66,
	67, 68, 118, 2, 13, 11, 10, 12, 9, 55,
	8, 51, 7, 19, 35, 5, 1, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 36,
}
var yyPact = [...]int{

	5, -1000, 5, -1000, -1000, 145, 145, 145, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -49, 137, 124,
	-33, 101, 95, 95, 32, 95, -1000, -1000, -1000, 6,
	108, 21, -16, -35, -1000, -1000, 95, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 95, -1000, -1000, -1000, 95, 95,
	95, -41, 95, 95, 112, 109, -1000, 34, 95, 95,
	18, 153, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, -53, 71, -1000, 108,
	108, -1000, 95, 95, -60, -5, -7, 5, 5, 5,
	152, 90, 95, 5, 5, 47, 21, 21, 21, 21,
	21, 21, -16, -16, -16, -35, -35, -35, -1000, -1000,
	-1000, -1000, -62, -1000, -1000, -1000, 97, 102, 5, -1000,
	5, 150, 5, 70, 98, 65, 129, -1000, 5, 5,
	5, -1000, 52, 5, -1000, 149, 5, -1000, -1000, 139,
	-1000, -1000, 43, -1000, 31, 5, -1000, 5, -1000, -1000,
	29, 27, -1000, -1000,
}
var yyPgo = [...]int{

	0, 186, 172, 3, 156, 185, 92, 4, 184, 89,
	37, 9, 1, 2, 183, 182, 181, 180, 179, 0,
	178, 177, 176, 175, 174, 145,
}
var yyR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 24, 4, 4, 15, 15,
	15, 15, 16, 16, 5, 5, 5, 6, 6, 8,
	8, 8, 8, 7, 14, 14, 14, 9, 9, 9,
	9, 9, 9, 9, 10, 10, 10, 10, 11, 11,
	11, 11, 12, 12, 13, 13, 17, 17, 17, 17,
	17, 18, 19, 21, 21, 20, 20, 23, 22, 22,
	22, 22, 25, 25,
}
var yyR2 = [...]int{

	0, 1, 1, 2, 1, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 4,
	4, 4, 3, 4, 1, 2, 4, 1, 2, 1,
	1, 1, 1, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 3, 3, 1, 3, 3, 3, 1, 3,
	3, 3, 1, 3, 1, 3, 6, 4, 6, 7,
	5, 1, 1, 1, 1, 4, 6, 5, 7, 8,
	5, 6, 5, 8,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -7, -15, -17, -20,
	-22, -23, -21, -24, -25, 9, 8, 6, -6, -14,
	15, 45, 19, 30, 27, 26, 38, 37, 5, 48,
	-9, -10, -11, -12, -13, -8, 64, 12, 13, 14,
	-3, -4, -4, -4, 64, 6, -7, 15, 17, 18,
	49, -16, 66, 16, -7, -18, -7, -7, -7, 16,
	-7, 15, 64, 58, 59, 60, 61, 62, 63, 51,
	50, 52, 54, 55, 56, 57, -7, -6, -7, -9,
	-9, -7, 49, 66, -7, -7, 16, 21, 20, 32,
	31, -7, -7, 33, 8, -6, -10, -10, -10, -10,
	-10, -10, -11, -11, -11, -12, -12, -12, -13, 65,
	65, -7, -7, 67, 41, 41, -3, -19, -2, -3,
	8, 28, 29, -7, -19, -19, 65, 67, 23, 23,
	22, 25, -19, 8, -3, 28, 29, 25, 25, 15,
	-3, -3, -19, 25, -19, 8, -3, 8, 25, 25,
	-19, -19, 25, 25,
}
var yyDef = [...]int{

	0, -2, 1, 2, 4, 0, 27, 0, 8, 9,
	10, 11, 12, 13, 14, 16, 17, 24, 0, 33,
	32, 0, 0, 0, 0, 0, 63, 64, 15, 0,
	34, 37, 44, 48, 52, 54, 0, 29, 30, 31,
	3, 5, 6, 7, 0, 25, 28, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 27, 35,
	36, 18, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 39, 40, 41,
	42, 43, 45, 46, 47, 49, 50, 51, 53, 55,
	26, 19, 0, 22, 20, 21, 57, 0, 62, 65,
	0, 0, 0, 0, 0, 0, 0, 23, 0, 0,
	0, 60, 0, 0, 70, 0, 0, 67, 72, 0,
	56, 58, 0, 66, 0, 0, 71, 0, 59, 68,
	0, 0, 69, 73,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line _parser_generated.y:40
		{
			yyVAL.node = yyDollar[1].node
			yylex.(*Lexer).result = yyVAL.node
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line _parser_generated.y:47
		{
			n := node.NewNodeSentence(yyDollar[1].node.GetFileInfo())
			n.Append(yyDollar[1].node)
			yyVAL.node = n
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line _parser_generated.y:53
		{
			n, _ := yyDollar[1].node.(node.NodeSentence)
			n.Append(yyDollar[2].node)
			yyVAL.node = n
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line _parser_generated.y:72
		{
			yyVAL.node = node.NewNodeNop(yyDollar[1].token)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line _parser_generated.y:75
		{
			yyVAL.node = node.NewNodeNop(yyDollar[1].token)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line _parser_generated.y:76
		{
			yyVAL.node = node.NewNodeNop(yyDollar[1].token)
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line _parser_generated.y:80
		{
			yyVAL.node = node.NewNodeLet(yyDollar[1].token, node.NewNodeList(), yyDollar[3].node)
		}
	case 19:
		yyDollar = yyS[yypt-4 : yypt+1]
//line _parser_generated.y:84
		{
			n := yyDollar[2].node.(node.NodeList)
			yyVAL.node = node.NewNodeLet(yyDollar[1].token, n, yyDollar[4].node)
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line _parser_generated.y:89
		{
			yyVAL.node = node.NewNodeLet(yyDollar[2].token, node.NewNodeList(), yyDollar[3].node)
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line _parser_generated.y:93
		{
			yyVAL.node = node.NewNodeLet(yyDollar[3].token, node.NewNodeList(), yyDollar[2].node)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line _parser_generated.y:99
		{
			n := node.NodeList{yyDollar[2].node}
			yyVAL.node = n
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line _parser_generated.y:104
		{
			n := yyDollar[1].node.(node.NodeList)
			yyVAL.node = append(n, yyDollar[3].node)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line _parser_generated.y:111
		{
			yyVAL.node = node.NewNodeCallFunc(yyDollar[1].token)
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line _parser_generated.y:115
		{
			n := node.NewNodeCallFunc(yyDollar[2].token)
			n.Args, _ = yyDollar[1].node.(node.NodeList)
			yyVAL.node = n
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line _parser_generated.y:121
		{
			n := node.NewNodeCallFunc(yyDollar[1].token)
			n.Args, _ = yyDollar[3].node.(node.NodeList)
			yyVAL.node = n
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line _parser_generated.y:129
		{
			n := node.NodeList{yyDollar[1].node}
			yyVAL.node = n
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line _parser_generated.y:134
		{
			args, _ := yyDollar[1].node.(node.NodeList)
			n := append(args, yyDollar[2].node)
			yyVAL.node = n
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line _parser_generated.y:142
		{
			yyVAL.node = node.NewNodeConst(value.Float, yyDollar[1].token)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line _parser_generated.y:143
		{
			yyVAL.node = node.NewNodeConst(value.Str, yyDollar[1].token)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line _parser_generated.y:144
		{
			yyVAL.node = node.NewNodeConst(value.Str, yyDollar[1].token)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line _parser_generated.y:145
		{
			yyVAL.node = node.NewNodeWord(yyDollar[1].token)
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line _parser_generated.y:153
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line _parser_generated.y:157
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line _parser_generated.y:164
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line _parser_generated.y:168
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line _parser_generated.y:172
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line _parser_generated.y:176
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line _parser_generated.y:180
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line _parser_generated.y:184
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line _parser_generated.y:191
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line _parser_generated.y:195
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line _parser_generated.y:199
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line _parser_generated.y:206
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line _parser_generated.y:210
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line _parser_generated.y:214
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line _parser_generated.y:221
		{
			yyVAL.node = node.NewNodeOperator(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line _parser_generated.y:228
		{
			yyVAL.node = node.NewNodeCalc(yyDollar[3].token, yyDollar[2].node)
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line _parser_generated.y:235
		{
			yyVAL.node = node.NewNodeIf(yyDollar[1].token, yyDollar[2].node, yyDollar[4].node, yyDollar[6].node)
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line _parser_generated.y:239
		{
			yyVAL.node = node.NewNodeIf(yyDollar[1].token, yyDollar[2].node, yyDollar[4].node, node.NewNodeNop(yyDollar[1].token))
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
//line _parser_generated.y:243
		{
			yyVAL.node = node.NewNodeIf(yyDollar[1].token, yyDollar[2].node, yyDollar[4].node, yyDollar[6].node)
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
//line _parser_generated.y:247
		{
			yyVAL.node = node.NewNodeIf(yyDollar[1].token, yyDollar[2].node, yyDollar[4].node, yyDollar[6].node)
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line _parser_generated.y:251
		{
			yyVAL.node = node.NewNodeIf(yyDollar[1].token, yyDollar[2].node, yyDollar[4].node, node.NewNodeNop(yyDollar[1].token))
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line _parser_generated.y:263
		{
			yyVAL.node = node.NewNodeContinue(yyDollar[1].token, 0)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line _parser_generated.y:266
		{
			yyVAL.node = node.NewNodeBreak(yyDollar[1].token, 0)
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line _parser_generated.y:272
		{
			yyVAL.node = node.NewNodeRepeat(yyDollar[3].token, yyDollar[2].node, yyDollar[4].node)
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line _parser_generated.y:276
		{
			yyVAL.node = node.NewNodeRepeat(yyDollar[3].token, yyDollar[2].node, yyDollar[5].node)
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line _parser_generated.y:282
		{
			yyVAL.node = node.NewNodeWhile(yyDollar[3].token, yyDollar[2].node, yyDollar[4].node)
		}
	case 68:
		yyDollar = yyS[yypt-7 : yypt+1]
//line _parser_generated.y:288
		{
			yyVAL.node = node.NewNodeFor(yyDollar[4].token, "", yyDollar[2].node, yyDollar[3].node, yyDollar[6].node)
		}
	case 69:
		yyDollar = yyS[yypt-8 : yypt+1]
//line _parser_generated.y:292
		{
			yyVAL.node = node.NewNodeFor(yyDollar[5].token, yyDollar[2].token.Literal, yyDollar[3].node, yyDollar[4].node, yyDollar[7].node)
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line _parser_generated.y:296
		{
			yyVAL.node = node.NewNodeFor(yyDollar[4].token, "", yyDollar[2].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
//line _parser_generated.y:300
		{
			yyVAL.node = node.NewNodeFor(yyDollar[5].token, yyDollar[2].token.Literal, yyDollar[3].node, yyDollar[4].node, yyDollar[6].node)
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line _parser_generated.y:306
		{
			yyVAL.node = node.NewNodeDefFunc(yyDollar[2].token, node.NewNodeList(), yyDollar[4].node)
		}
	case 73:
		yyDollar = yyS[yypt-8 : yypt+1]
//line _parser_generated.y:310
		{
			yyVAL.node = node.NewNodeDefFunc(yyDollar[5].token, yyDollar[3].node, yyDollar[7].node)
		}
	}
	goto yystack /* stack new state and value */
}
